// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  studentId String   @unique
  granted   Boolean  @default(false)
  createdAt DateTime @default(now())

  // When permission is granted, a Poll is created
  poll Poll?
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  studentId     String    @unique
  emailVerified DateTime?
  image         String?
  password      String? // Made optional for OAuth users
  role          Role      @default(user)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts     Account[]
  sessions     Session[]
  votes        Vote[]
  createdNames Name[]

  @@map("users")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Poll {
  id           Int        @id @default(autoincrement())
  permissionId Int        @unique
  permission   Permission @relation(fields: [permissionId], references: [id])
  title        String?
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  names Name[]
}

model Name {
  id        Int      @id @default(autoincrement())
  pollId    Int
  poll      Poll     @relation(fields: [pollId], references: [id])
  value     String
  createdBy String
  creator   User     @relation(fields: [createdBy], references: [id])
  votes     Vote[]
  createdAt DateTime @default(now())
}

model Vote {
  id      Int    @id @default(autoincrement())
  voterId String
  voter   User   @relation(fields: [voterId], references: [id])

  nameId Int
  name   Name @relation(fields: [nameId], references: [id])

  createdAt DateTime @default(now())

  @@unique([voterId, nameId]) // One vote per user per name
}

enum Role {
  admin
  user
}
